name: Build and Trigger Readthedocs

on:
  push:
    paths:
      - 'docs/**'           # Trigger for changes in the docs directory
      - '**/*.rst'          # Trigger for any RST files
      - '**/*.man'          # Trigger for any man page files
  pull_request:
    paths:
      - 'docs/**'           # Same triggers for pull requests
      - '**/*.rst'
      - '**/*.man'

jobs:
  generate-rst:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install pandoc
      
      - name: Create docs/man subdirectories if empty
        run: |
          # Check if docs/man exists and is empty, then create it and necessary subdirectories if needed
          if [ ! -d "docs/man" ]; then
            echo "Creating docs/man directory."
            mkdir -p docs/man
          fi

          # Recursively create subdirectories inside docs/man based on the .man file paths
          if [ -z "$(ls -A docs/man)" ]; then
            echo "docs/man is empty, proceeding to convert .man files."
            find ldms/src ldms/man -name "*.man" | while IFS= read -r man_file; do
              # Fix the target_file path construction to ensure proper subdirectory structure
              target_file="docs/man/$(echo "$man_file" | sed 's|^ldms/src/||;s|^ldms/man/||;s/\.man$/.rst/')"
              target_dir=$(dirname "$target_file")
              mkdir -p "$target_dir"  # Create the necessary subdirectories
              pandoc -f man "$man_file" -s -o "$target_file" 2>/dev/null || echo "Error processing $man_file"
              echo "# $(basename "$target_file" .rst)" | cat - "$target_file" > temp && mv temp "$target_file"
            done
          else
            echo "docs/man is not empty, checking for modified .man files"
            git diff --name-only HEAD^ HEAD | grep "\.man$" | while IFS= read -r modified_man; do
              # Fix the target_file path construction to ensure proper subdirectory structure
              target_file="docs/man/$(echo "$modified_man" | sed 's|^ldms/src/||;s|^ldms/man/||;s/\.man$/.rst/')"
              target_dir=$(dirname "$target_file")
              mkdir -p "$target_dir"  # Create the necessary subdirectories
              pandoc -f man "$modified_man" -s -o "$target_file" 2>/dev/null || echo "Error processing $modified_man"
              echo "# $(basename "$target_file" .rst)" | cat - "$target_file" > temp && mv temp "$target_file"
            done
          fi

      
      - name: Update index.rst files
        run: |
          # Function to generate index.rst for all subdirectories
          generate_index_rsts() {
            local dir="$1"
            
            # Check if the directory contains .rst files (excluding index.rst)
            rst_files=$(find "$dir" -maxdepth 1 -name "*.rst" ! -name "index.rst" | sort)

            if [ ! -z "$rst_files" ]; then
              echo "Generating index.rst in $dir"

              # Create or update the index.rst with the directory name as title
              if [ "$dir" != "docs/man" ]; then
                caption=$(basename "$dir" | sed 's/^\(\w\)/\U\1/')   # Capitalize first letter
                echo "$caption" > "$dir/index.rst"    # Add title
                echo "$(echo "$caption" | sed 's/./=/g')" >> "$dir/index.rst"  # Add underline
                echo "" >> "$dir/index.rst"
              else
                # docs/man doesn't have a title
                echo "" > "$dir/index.rst"
              fi

              # Add toctree directive for the current directory
              echo ".. toctree::" >> "$dir/index.rst"
              echo "   :maxdepth: 4" >> "$dir/index.rst"
              echo "" >> "$dir/index.rst"

              # Loop through .rst files in the current directory and add to toctree
              for rst_file in $rst_files; do
                base_name=$(basename "$rst_file" .rst)
                echo "   $base_name" >> "$dir/index.rst"
              done
            fi

            # Find all subdirectories in the current directory and process them
            subdirs=$(find "$dir" -mindepth 1 -maxdepth 1 -type d)
            for subdir in $subdirs; do
              generate_index_rsts "$subdir"  # Recursively process subdirectories
            done
          }

          # Start by generating index.rst for docs/man and all its subdirectories
          generate_index_rsts "docs/man"

      - name: Commit and Push Changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git add docs/man
            git commit -m "Update .rst and index.rst files"
            git push origin HEAD
          else
            echo "No changes to commit."
          fi

  build-docs:
    needs: generate-rst
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install Dependencies
        run: |
          pip install -r docs/requirements.txt

      - name: Build Documentation Locally
        run: |
          sphinx-build -b html docs/ docs/_build

  trigger-rtd:
    needs: build-docs  # Ensures this job runs after the build-docs job
    runs-on: ubuntu-22.04

    steps:
      - name: Generate Webhook Signature and Trigger RTD
        run: |
          # Define the webhook secret
          SECRET="${{ secrets.RTD_WEBHOOK_SECRET }}"

          # Create a JSON payload with "ref" set to the branch name
          PAYLOAD="{\"ref\": \"${GITHUB_REF_NAME}\"}"

          # Generate HMAC SHA256 signature for the payload
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$SECRET" | sed 's/^.* //')

          # Trigger the Read the Docs webhook
          curl -X POST \
               -H "Content-Type: application/json" \
               -H "X-Hub-Signature-256: sha256=$SIGNATURE" \
               -d "$PAYLOAD" \
               https://readthedocs.org/api/v2/webhook/ovis-rtd/273836/
